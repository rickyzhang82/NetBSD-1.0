/* ========= begin header generated by ./mkh ========= */
#ifdef __cplusplus
extern "C" {
#endif

/* === regcomp.c === */
static void p_ere __P((register struct parse *p, int stop));
static void p_ere_exp __P((register struct parse *p));
static void p_str __P((register struct parse *p));
static void p_bre __P((register struct parse *p, register int end1, register int end2));
static int p_simp_re __P((register struct parse *p, int starordinary));
static int p_count __P((register struct parse *p));
static void p_bracket __P((register struct parse *p));
static void p_b_term __P((register struct parse *p, register cset *cs));
static void p_b_cclass __P((register struct parse *p, register cset *cs));
static void p_b_eclass __P((register struct parse *p, register cset *cs));
static char p_b_symbol __P((register struct parse *p));
static char p_b_coll_elem __P((register struct parse *p, int endc));
static char othercase __P((int ch));
static void bothcases __P((register struct parse *p, int ch));
static void ordinary __P((register struct parse *p, register int ch));
static void nonnewline __P((register struct parse *p));
static void repeat __P((register struct parse *p, sopno start, int from, int to));
static int seterr __P((register struct parse *p, int e));
static cset *allocset __P((register struct parse *p));
static void freeset __P((register struct parse *p, register cset *cs));
static int freezeset __P((register struct parse *p, register cset *cs));
static int firstch __P((register struct parse *p, register cset *cs));
static int nch __P((register struct parse *p, register cset *cs));
static void mcadd __P((register struct parse *p, register cset *cs, register char *cp));
static void mcsub __P((register cset *cs, register char *cp));
static int mcin __P((register cset *cs, register char *cp));
static char *mcfind __P((register cset *cs, register char *cp));
static void mcinvert __P((register struct parse *p, register cset *cs));
static void mccase __P((register struct parse *p, register cset *cs));
static int isinsets __P((register struct re_guts *g, int c));
static int samesets __P((register struct re_guts *g, int c1, int c2));
static void categorize __P((struct parse *p, register struct re_guts *g));
static sopno dupl __P((register struct parse *p, sopno start, sopno finish));
static void doemit __P((register struct parse *p, sop op, size_t opnd));
static void doinsert __P((register struct parse *p, sop op, size_t opnd, sopno pos));
static void dofwd __P((register struct parse *p, sopno pos, sop value));
static void enlarge __P((register struct parse *p, sopno size));
static void stripsnug __P((register struct parse *p, register struct re_guts *g));
static void findmust __P((register struct parse *p, register struct re_guts *g));
static sopno pluscount __P((register struct parse *p, register struct re_guts *g));

#ifdef __cplusplus
}
#endif
/* ========= end header generated by ./mkh ========= */
